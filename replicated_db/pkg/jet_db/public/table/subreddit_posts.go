//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SubredditPosts = newSubredditPostsTable("public", "subreddit_posts", "")

type subredditPostsTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	Title           postgres.ColumnString
	Content         postgres.ColumnString
	Image           postgres.ColumnString
	CreatedAt       postgres.ColumnTimestamp
	NumberOfVotes   postgres.ColumnInteger
	IsPinned        postgres.ColumnBool
	OwnerHandle     postgres.ColumnString
	SubredditHandle postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubredditPostsTable struct {
	subredditPostsTable

	EXCLUDED subredditPostsTable
}

// AS creates new SubredditPostsTable with assigned alias
func (a SubredditPostsTable) AS(alias string) *SubredditPostsTable {
	return newSubredditPostsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubredditPostsTable with assigned schema name
func (a SubredditPostsTable) FromSchema(schemaName string) *SubredditPostsTable {
	return newSubredditPostsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubredditPostsTable with assigned table prefix
func (a SubredditPostsTable) WithPrefix(prefix string) *SubredditPostsTable {
	return newSubredditPostsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubredditPostsTable with assigned table suffix
func (a SubredditPostsTable) WithSuffix(suffix string) *SubredditPostsTable {
	return newSubredditPostsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubredditPostsTable(schemaName, tableName, alias string) *SubredditPostsTable {
	return &SubredditPostsTable{
		subredditPostsTable: newSubredditPostsTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSubredditPostsTableImpl("", "excluded", ""),
	}
}

func newSubredditPostsTableImpl(schemaName, tableName, alias string) subredditPostsTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		TitleColumn           = postgres.StringColumn("title")
		ContentColumn         = postgres.StringColumn("content")
		ImageColumn           = postgres.StringColumn("image")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		NumberOfVotesColumn   = postgres.IntegerColumn("number_of_votes")
		IsPinnedColumn        = postgres.BoolColumn("is_pinned")
		OwnerHandleColumn     = postgres.StringColumn("owner_handle")
		SubredditHandleColumn = postgres.StringColumn("subreddit_handle")
		allColumns            = postgres.ColumnList{IDColumn, TitleColumn, ContentColumn, ImageColumn, CreatedAtColumn, NumberOfVotesColumn, IsPinnedColumn, OwnerHandleColumn, SubredditHandleColumn}
		mutableColumns        = postgres.ColumnList{TitleColumn, ContentColumn, ImageColumn, CreatedAtColumn, NumberOfVotesColumn, IsPinnedColumn, OwnerHandleColumn, SubredditHandleColumn}
	)

	return subredditPostsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Title:           TitleColumn,
		Content:         ContentColumn,
		Image:           ImageColumn,
		CreatedAt:       CreatedAtColumn,
		NumberOfVotes:   NumberOfVotesColumn,
		IsPinned:        IsPinnedColumn,
		OwnerHandle:     OwnerHandleColumn,
		SubredditHandle: SubredditHandleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
