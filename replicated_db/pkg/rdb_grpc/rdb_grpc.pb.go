// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: rdb_grpc.proto

package rdb_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// models represented in the database
type Subreddit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle    string                 `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Title     string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	About     string                 `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`
	Avatar    []byte                 `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Rules     string                 `protobuf:"bytes,5,opt,name=rules,proto3" json:"rules,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Users     []*User                `protobuf:"bytes,7,rep,name=users,proto3" json:"users,omitempty"`
	Admins    []*User                `protobuf:"bytes,8,rep,name=admins,proto3" json:"admins,omitempty"`
}

func (x *Subreddit) Reset() {
	*x = Subreddit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subreddit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subreddit) ProtoMessage() {}

func (x *Subreddit) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subreddit.ProtoReflect.Descriptor instead.
func (*Subreddit) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *Subreddit) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *Subreddit) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Subreddit) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *Subreddit) GetAvatar() []byte {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *Subreddit) GetRules() string {
	if x != nil {
		return x.Rules
	}
	return ""
}

func (x *Subreddit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Subreddit) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Subreddit) GetAdmins() []*User {
	if x != nil {
		return x.Admins
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle            string                 `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	DisplayName       string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Avatar            []byte                 `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Karma             int32                  `protobuf:"varint,5,opt,name=karma,proto3" json:"karma,omitempty"`
	Comments          []*Comment             `protobuf:"bytes,6,rep,name=comments,proto3" json:"comments,omitempty"`
	Posts             []*Post                `protobuf:"bytes,7,rep,name=posts,proto3" json:"posts,omitempty"`
	FollowingHandles  []string               `protobuf:"bytes,8,rep,name=following_handles,json=followingHandles,proto3" json:"following_handles,omitempty"`
	FollowedByHandles []string               `protobuf:"bytes,9,rep,name=followed_by_handles,json=followedByHandles,proto3" json:"followed_by_handles,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *User) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *User) GetAvatar() []byte {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetKarma() int32 {
	if x != nil {
		return x.Karma
	}
	return 0
}

func (x *User) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *User) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

func (x *User) GetFollowingHandles() []string {
	if x != nil {
		return x.FollowingHandles
	}
	return nil
}

func (x *User) GetFollowedByHandles() []string {
	if x != nil {
		return x.FollowedByHandles
	}
	return nil
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content         string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Image           []byte                 `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	NumberOfVotes   int32                  `protobuf:"varint,6,opt,name=number_of_votes,json=numberOfVotes,proto3" json:"number_of_votes,omitempty"`
	IsPinned        bool                   `protobuf:"varint,7,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`
	OwnerHandle     string                 `protobuf:"bytes,8,opt,name=owner_handle,json=ownerHandle,proto3" json:"owner_handle,omitempty"`
	SubredditHandle string                 `protobuf:"bytes,9,opt,name=subreddit_handle,json=subredditHandle,proto3" json:"subreddit_handle,omitempty"`
	Comments        []*Comment             `protobuf:"bytes,10,rep,name=comments,proto3" json:"comments,omitempty"`
	Tags            []string               `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *Post) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Post) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Post) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Post) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Post) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Post) GetNumberOfVotes() int32 {
	if x != nil {
		return x.NumberOfVotes
	}
	return 0
}

func (x *Post) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *Post) GetOwnerHandle() string {
	if x != nil {
		return x.OwnerHandle
	}
	return ""
}

func (x *Post) GetSubredditHandle() string {
	if x != nil {
		return x.SubredditHandle
	}
	return ""
}

func (x *Post) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Post) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content         string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Image           []byte `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	NumberOfVotes   int32  `protobuf:"varint,4,opt,name=number_of_votes,json=numberOfVotes,proto3" json:"number_of_votes,omitempty"`
	OwnerHandle     string `protobuf:"bytes,5,opt,name=owner_handle,json=ownerHandle,proto3" json:"owner_handle,omitempty"`
	ParentCommentId string `protobuf:"bytes,6,opt,name=parent_comment_id,json=parentCommentId,proto3" json:"parent_comment_id,omitempty"`
	PostId          string `protobuf:"bytes,7,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Comment) GetNumberOfVotes() int32 {
	if x != nil {
		return x.NumberOfVotes
	}
	return 0
}

func (x *Comment) GetOwnerHandle() string {
	if x != nil {
		return x.OwnerHandle
	}
	return ""
}

func (x *Comment) GetParentCommentId() string {
	if x != nil {
		return x.ParentCommentId
	}
	return ""
}

func (x *Comment) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

// custom arg & reply messages for the services defined above
type SubredditList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subreddits []*Subreddit `protobuf:"bytes,1,rep,name=subreddits,proto3" json:"subreddits,omitempty"`
}

func (x *SubredditList) Reset() {
	*x = SubredditList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubredditList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubredditList) ProtoMessage() {}

func (x *SubredditList) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubredditList.ProtoReflect.Descriptor instead.
func (*SubredditList) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *SubredditList) GetSubreddits() []*Subreddit {
	if x != nil {
		return x.Subreddits
	}
	return nil
}

type PostList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Posts []*Post `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (x *PostList) Reset() {
	*x = PostList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostList) ProtoMessage() {}

func (x *PostList) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostList.ProtoReflect.Descriptor instead.
func (*PostList) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *PostList) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

type TwoPhaseCommitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TwopcEnabled  bool   `protobuf:"varint,1,opt,name=twopc_enabled,json=twopcEnabled,proto3" json:"twopc_enabled,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *TwoPhaseCommitInfo) Reset() {
	*x = TwoPhaseCommitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoPhaseCommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoPhaseCommitInfo) ProtoMessage() {}

func (x *TwoPhaseCommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoPhaseCommitInfo.ProtoReflect.Descriptor instead.
func (*TwoPhaseCommitInfo) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *TwoPhaseCommitInfo) GetTwopcEnabled() bool {
	if x != nil {
		return x.TwopcEnabled
	}
	return false
}

func (x *TwoPhaseCommitInfo) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type PostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Post           *Post               `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	UserShard      int32               `protobuf:"varint,2,opt,name=user_shard,json=userShard,proto3" json:"user_shard,omitempty"`
	SubredditShard int32               `protobuf:"varint,3,opt,name=subreddit_shard,json=subredditShard,proto3" json:"subreddit_shard,omitempty"`
	TwopcInfo      *TwoPhaseCommitInfo `protobuf:"bytes,4,opt,name=twopc_info,json=twopcInfo,proto3" json:"twopc_info,omitempty"`
}

func (x *PostInfo) Reset() {
	*x = PostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInfo) ProtoMessage() {}

func (x *PostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInfo.ProtoReflect.Descriptor instead.
func (*PostInfo) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *PostInfo) GetPost() *Post {
	if x != nil {
		return x.Post
	}
	return nil
}

func (x *PostInfo) GetUserShard() int32 {
	if x != nil {
		return x.UserShard
	}
	return 0
}

func (x *PostInfo) GetSubredditShard() int32 {
	if x != nil {
		return x.SubredditShard
	}
	return 0
}

func (x *PostInfo) GetTwopcInfo() *TwoPhaseCommitInfo {
	if x != nil {
		return x.TwopcInfo
	}
	return nil
}

type CommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment        *Comment            `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	UserShard      int32               `protobuf:"varint,2,opt,name=user_shard,json=userShard,proto3" json:"user_shard,omitempty"`
	SubredditShard int32               `protobuf:"varint,3,opt,name=subreddit_shard,json=subredditShard,proto3" json:"subreddit_shard,omitempty"`
	TwopcInfo      *TwoPhaseCommitInfo `protobuf:"bytes,4,opt,name=twopc_info,json=twopcInfo,proto3" json:"twopc_info,omitempty"`
}

func (x *CommentInfo) Reset() {
	*x = CommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentInfo) ProtoMessage() {}

func (x *CommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentInfo.ProtoReflect.Descriptor instead.
func (*CommentInfo) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *CommentInfo) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *CommentInfo) GetUserShard() int32 {
	if x != nil {
		return x.UserShard
	}
	return 0
}

func (x *CommentInfo) GetSubredditShard() int32 {
	if x != nil {
		return x.SubredditShard
	}
	return 0
}

func (x *CommentInfo) GetTwopcInfo() *TwoPhaseCommitInfo {
	if x != nil {
		return x.TwopcInfo
	}
	return nil
}

type UserFollowage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromHandle string `protobuf:"bytes,1,opt,name=from_handle,json=fromHandle,proto3" json:"from_handle,omitempty"`
	ToHandle   string `protobuf:"bytes,2,opt,name=to_handle,json=toHandle,proto3" json:"to_handle,omitempty"`
}

func (x *UserFollowage) Reset() {
	*x = UserFollowage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFollowage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFollowage) ProtoMessage() {}

func (x *UserFollowage) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFollowage.ProtoReflect.Descriptor instead.
func (*UserFollowage) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *UserFollowage) GetFromHandle() string {
	if x != nil {
		return x.FromHandle
	}
	return ""
}

func (x *UserFollowage) GetToHandle() string {
	if x != nil {
		return x.ToHandle
	}
	return ""
}

type UserSubredditMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserHandle      string `protobuf:"bytes,1,opt,name=user_handle,json=userHandle,proto3" json:"user_handle,omitempty"`
	SubredditHandle string `protobuf:"bytes,2,opt,name=subreddit_handle,json=subredditHandle,proto3" json:"subreddit_handle,omitempty"`
}

func (x *UserSubredditMembership) Reset() {
	*x = UserSubredditMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdb_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSubredditMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubredditMembership) ProtoMessage() {}

func (x *UserSubredditMembership) ProtoReflect() protoreflect.Message {
	mi := &file_rdb_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubredditMembership.ProtoReflect.Descriptor instead.
func (*UserSubredditMembership) Descriptor() ([]byte, []int) {
	return file_rdb_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *UserSubredditMembership) GetUserHandle() string {
	if x != nil {
		return x.UserHandle
	}
	return ""
}

func (x *UserSubredditMembership) GetSubredditHandle() string {
	if x != nil {
		return x.SubredditHandle
	}
	return ""
}

var File_rdb_grpc_proto protoreflect.FileDescriptor

var file_rdb_grpc_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x02, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x73, 0x22, 0xdc, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x61, 0x72, 0x6d,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x61, 0x72, 0x6d, 0x61, 0x12, 0x2d,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x22, 0xed, 0x02, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0xd9, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x73, 0x22, 0x30, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x73, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x54, 0x77, 0x6f, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x77,
	0x6f, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x74, 0x77, 0x6f, 0x70, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x74, 0x77, 0x6f, 0x70, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x77, 0x6f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x77, 0x6f, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbf, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x77, 0x6f, 0x70, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x77, 0x6f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x77, 0x6f, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x65, 0x0a,
	0x17, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x32, 0xc8, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x47, 0x52, 0x50, 0x43, 0x12, 0x38, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x12, 0x3b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x32,
	0xc8, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x52, 0x50, 0x43, 0x12, 0x2d, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x72, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x72,
	0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x12, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x50, 0x69, 0x6e, 0x12, 0x0e, 0x2e, 0x72, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x55,
	0x6e, 0x70, 0x69, 0x6e, 0x12, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x55, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x0e,
	0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x72, 0x64, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x64, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x32, 0xd6, 0x03, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x52, 0x50, 0x43, 0x12, 0x29, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x61, 0x72, 0x6d,
	0x61, 0x12, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x61, 0x72,
	0x6d, 0x61, 0x12, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x72,
	0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a,
	0x08, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x4a, 0x6f,
	0x69, 0x6e, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x21, 0x2e, 0x72, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x21, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0xa7, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x52, 0x50, 0x43, 0x12, 0x36, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x15, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x55,
	0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x44,
	0x6f, 0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x64, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x41, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x68, 0x6d, 0x65,
	0x64, 0x65, 0x6c, 0x67, 0x68, 0x72, 0x62, 0x61, 0x77, 0x79, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x62, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x64, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x08, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rdb_grpc_proto_rawDescOnce sync.Once
	file_rdb_grpc_proto_rawDescData = file_rdb_grpc_proto_rawDesc
)

func file_rdb_grpc_proto_rawDescGZIP() []byte {
	file_rdb_grpc_proto_rawDescOnce.Do(func() {
		file_rdb_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rdb_grpc_proto_rawDescData)
	})
	return file_rdb_grpc_proto_rawDescData
}

var file_rdb_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_rdb_grpc_proto_goTypes = []interface{}{
	(*Subreddit)(nil),               // 0: rdb_grpc.Subreddit
	(*User)(nil),                    // 1: rdb_grpc.User
	(*Post)(nil),                    // 2: rdb_grpc.Post
	(*Comment)(nil),                 // 3: rdb_grpc.Comment
	(*SubredditList)(nil),           // 4: rdb_grpc.SubredditList
	(*PostList)(nil),                // 5: rdb_grpc.PostList
	(*TwoPhaseCommitInfo)(nil),      // 6: rdb_grpc.TwoPhaseCommitInfo
	(*PostInfo)(nil),                // 7: rdb_grpc.PostInfo
	(*CommentInfo)(nil),             // 8: rdb_grpc.CommentInfo
	(*UserFollowage)(nil),           // 9: rdb_grpc.UserFollowage
	(*UserSubredditMembership)(nil), // 10: rdb_grpc.UserSubredditMembership
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 12: google.protobuf.Empty
}
var file_rdb_grpc_proto_depIdxs = []int32{
	11, // 0: rdb_grpc.Subreddit.created_at:type_name -> google.protobuf.Timestamp
	1,  // 1: rdb_grpc.Subreddit.users:type_name -> rdb_grpc.User
	1,  // 2: rdb_grpc.Subreddit.admins:type_name -> rdb_grpc.User
	11, // 3: rdb_grpc.User.created_at:type_name -> google.protobuf.Timestamp
	3,  // 4: rdb_grpc.User.comments:type_name -> rdb_grpc.Comment
	2,  // 5: rdb_grpc.User.posts:type_name -> rdb_grpc.Post
	11, // 6: rdb_grpc.Post.created_at:type_name -> google.protobuf.Timestamp
	3,  // 7: rdb_grpc.Post.comments:type_name -> rdb_grpc.Comment
	0,  // 8: rdb_grpc.SubredditList.subreddits:type_name -> rdb_grpc.Subreddit
	2,  // 9: rdb_grpc.PostList.posts:type_name -> rdb_grpc.Post
	2,  // 10: rdb_grpc.PostInfo.post:type_name -> rdb_grpc.Post
	6,  // 11: rdb_grpc.PostInfo.twopc_info:type_name -> rdb_grpc.TwoPhaseCommitInfo
	3,  // 12: rdb_grpc.CommentInfo.comment:type_name -> rdb_grpc.Comment
	6,  // 13: rdb_grpc.CommentInfo.twopc_info:type_name -> rdb_grpc.TwoPhaseCommitInfo
	0,  // 14: rdb_grpc.SubredditGRPC.GetSubreddit:input_type -> rdb_grpc.Subreddit
	0,  // 15: rdb_grpc.SubredditGRPC.CreateSubreddit:input_type -> rdb_grpc.Subreddit
	12, // 16: rdb_grpc.SubredditGRPC.GetSubreddits:input_type -> google.protobuf.Empty
	7,  // 17: rdb_grpc.PostGRPC.GetPost:input_type -> rdb_grpc.PostInfo
	7,  // 18: rdb_grpc.PostGRPC.CreatPost:input_type -> rdb_grpc.PostInfo
	12, // 19: rdb_grpc.PostGRPC.GetPosts:input_type -> google.protobuf.Empty
	2,  // 20: rdb_grpc.PostGRPC.Pin:input_type -> rdb_grpc.Post
	2,  // 21: rdb_grpc.PostGRPC.Unpin:input_type -> rdb_grpc.Post
	2,  // 22: rdb_grpc.PostGRPC.UpVote:input_type -> rdb_grpc.Post
	2,  // 23: rdb_grpc.PostGRPC.DownVote:input_type -> rdb_grpc.Post
	1,  // 24: rdb_grpc.UserGRPC.GetUser:input_type -> rdb_grpc.User
	1,  // 25: rdb_grpc.UserGRPC.CreateUser:input_type -> rdb_grpc.User
	1,  // 26: rdb_grpc.UserGRPC.IncreaseKarma:input_type -> rdb_grpc.User
	1,  // 27: rdb_grpc.UserGRPC.DecreaseKarma:input_type -> rdb_grpc.User
	9,  // 28: rdb_grpc.UserGRPC.Follow:input_type -> rdb_grpc.UserFollowage
	9,  // 29: rdb_grpc.UserGRPC.Unfollow:input_type -> rdb_grpc.UserFollowage
	10, // 30: rdb_grpc.UserGRPC.JoinSubreddit:input_type -> rdb_grpc.UserSubredditMembership
	10, // 31: rdb_grpc.UserGRPC.LeaveSubreddit:input_type -> rdb_grpc.UserSubredditMembership
	8,  // 32: rdb_grpc.CommentGRPC.AddComment:input_type -> rdb_grpc.CommentInfo
	3,  // 33: rdb_grpc.CommentGRPC.UpVote:input_type -> rdb_grpc.Comment
	3,  // 34: rdb_grpc.CommentGRPC.DownVote:input_type -> rdb_grpc.Comment
	0,  // 35: rdb_grpc.SubredditGRPC.GetSubreddit:output_type -> rdb_grpc.Subreddit
	0,  // 36: rdb_grpc.SubredditGRPC.CreateSubreddit:output_type -> rdb_grpc.Subreddit
	4,  // 37: rdb_grpc.SubredditGRPC.GetSubreddits:output_type -> rdb_grpc.SubredditList
	2,  // 38: rdb_grpc.PostGRPC.GetPost:output_type -> rdb_grpc.Post
	2,  // 39: rdb_grpc.PostGRPC.CreatPost:output_type -> rdb_grpc.Post
	5,  // 40: rdb_grpc.PostGRPC.GetPosts:output_type -> rdb_grpc.PostList
	2,  // 41: rdb_grpc.PostGRPC.Pin:output_type -> rdb_grpc.Post
	2,  // 42: rdb_grpc.PostGRPC.Unpin:output_type -> rdb_grpc.Post
	2,  // 43: rdb_grpc.PostGRPC.UpVote:output_type -> rdb_grpc.Post
	2,  // 44: rdb_grpc.PostGRPC.DownVote:output_type -> rdb_grpc.Post
	1,  // 45: rdb_grpc.UserGRPC.GetUser:output_type -> rdb_grpc.User
	1,  // 46: rdb_grpc.UserGRPC.CreateUser:output_type -> rdb_grpc.User
	1,  // 47: rdb_grpc.UserGRPC.IncreaseKarma:output_type -> rdb_grpc.User
	1,  // 48: rdb_grpc.UserGRPC.DecreaseKarma:output_type -> rdb_grpc.User
	12, // 49: rdb_grpc.UserGRPC.Follow:output_type -> google.protobuf.Empty
	12, // 50: rdb_grpc.UserGRPC.Unfollow:output_type -> google.protobuf.Empty
	12, // 51: rdb_grpc.UserGRPC.JoinSubreddit:output_type -> google.protobuf.Empty
	12, // 52: rdb_grpc.UserGRPC.LeaveSubreddit:output_type -> google.protobuf.Empty
	3,  // 53: rdb_grpc.CommentGRPC.AddComment:output_type -> rdb_grpc.Comment
	3,  // 54: rdb_grpc.CommentGRPC.UpVote:output_type -> rdb_grpc.Comment
	3,  // 55: rdb_grpc.CommentGRPC.DownVote:output_type -> rdb_grpc.Comment
	35, // [35:56] is the sub-list for method output_type
	14, // [14:35] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rdb_grpc_proto_init() }
func file_rdb_grpc_proto_init() {
	if File_rdb_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rdb_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subreddit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubredditList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoPhaseCommitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFollowage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdb_grpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSubredditMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rdb_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_rdb_grpc_proto_goTypes,
		DependencyIndexes: file_rdb_grpc_proto_depIdxs,
		MessageInfos:      file_rdb_grpc_proto_msgTypes,
	}.Build()
	File_rdb_grpc_proto = out.File
	file_rdb_grpc_proto_rawDesc = nil
	file_rdb_grpc_proto_goTypes = nil
	file_rdb_grpc_proto_depIdxs = nil
}
