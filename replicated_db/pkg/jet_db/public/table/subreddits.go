//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Subreddits = newSubredditsTable("public", "subreddits", "")

type subredditsTable struct {
	postgres.Table

	// Columns
	Handle    postgres.ColumnString
	Title     postgres.ColumnString
	About     postgres.ColumnString
	Avatar    postgres.ColumnString
	Rules     postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubredditsTable struct {
	subredditsTable

	EXCLUDED subredditsTable
}

// AS creates new SubredditsTable with assigned alias
func (a SubredditsTable) AS(alias string) *SubredditsTable {
	return newSubredditsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubredditsTable with assigned schema name
func (a SubredditsTable) FromSchema(schemaName string) *SubredditsTable {
	return newSubredditsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubredditsTable with assigned table prefix
func (a SubredditsTable) WithPrefix(prefix string) *SubredditsTable {
	return newSubredditsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubredditsTable with assigned table suffix
func (a SubredditsTable) WithSuffix(suffix string) *SubredditsTable {
	return newSubredditsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubredditsTable(schemaName, tableName, alias string) *SubredditsTable {
	return &SubredditsTable{
		subredditsTable: newSubredditsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newSubredditsTableImpl("", "excluded", ""),
	}
}

func newSubredditsTableImpl(schemaName, tableName, alias string) subredditsTable {
	var (
		HandleColumn    = postgres.StringColumn("handle")
		TitleColumn     = postgres.StringColumn("title")
		AboutColumn     = postgres.StringColumn("about")
		AvatarColumn    = postgres.StringColumn("avatar")
		RulesColumn     = postgres.StringColumn("rules")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{HandleColumn, TitleColumn, AboutColumn, AvatarColumn, RulesColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{TitleColumn, AboutColumn, AvatarColumn, RulesColumn, CreatedAtColumn}
	)

	return subredditsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Handle:    HandleColumn,
		Title:     TitleColumn,
		About:     AboutColumn,
		Avatar:    AvatarColumn,
		Rules:     RulesColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
