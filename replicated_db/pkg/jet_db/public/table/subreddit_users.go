//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SubredditUsers = newSubredditUsersTable("public", "subreddit_users", "")

type subredditUsersTable struct {
	postgres.Table

	// Columns
	UserHandle      postgres.ColumnString
	SubredditHandle postgres.ColumnString
	IsAdmin         postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubredditUsersTable struct {
	subredditUsersTable

	EXCLUDED subredditUsersTable
}

// AS creates new SubredditUsersTable with assigned alias
func (a SubredditUsersTable) AS(alias string) *SubredditUsersTable {
	return newSubredditUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubredditUsersTable with assigned schema name
func (a SubredditUsersTable) FromSchema(schemaName string) *SubredditUsersTable {
	return newSubredditUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubredditUsersTable with assigned table prefix
func (a SubredditUsersTable) WithPrefix(prefix string) *SubredditUsersTable {
	return newSubredditUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubredditUsersTable with assigned table suffix
func (a SubredditUsersTable) WithSuffix(suffix string) *SubredditUsersTable {
	return newSubredditUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubredditUsersTable(schemaName, tableName, alias string) *SubredditUsersTable {
	return &SubredditUsersTable{
		subredditUsersTable: newSubredditUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSubredditUsersTableImpl("", "excluded", ""),
	}
}

func newSubredditUsersTableImpl(schemaName, tableName, alias string) subredditUsersTable {
	var (
		UserHandleColumn      = postgres.StringColumn("user_handle")
		SubredditHandleColumn = postgres.StringColumn("subreddit_handle")
		IsAdminColumn         = postgres.BoolColumn("is_admin")
		allColumns            = postgres.ColumnList{UserHandleColumn, SubredditHandleColumn, IsAdminColumn}
		mutableColumns        = postgres.ColumnList{IsAdminColumn}
	)

	return subredditUsersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserHandle:      UserHandleColumn,
		SubredditHandle: SubredditHandleColumn,
		IsAdmin:         IsAdminColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
