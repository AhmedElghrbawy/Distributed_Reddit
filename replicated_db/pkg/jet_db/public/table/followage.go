//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Followage = newFollowageTable("public", "followage", "")

type followageTable struct {
	postgres.Table

	// Columns
	FollowerHandle postgres.ColumnString
	FollowedHandle postgres.ColumnString
	FollowedSince  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FollowageTable struct {
	followageTable

	EXCLUDED followageTable
}

// AS creates new FollowageTable with assigned alias
func (a FollowageTable) AS(alias string) *FollowageTable {
	return newFollowageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FollowageTable with assigned schema name
func (a FollowageTable) FromSchema(schemaName string) *FollowageTable {
	return newFollowageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FollowageTable with assigned table prefix
func (a FollowageTable) WithPrefix(prefix string) *FollowageTable {
	return newFollowageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FollowageTable with assigned table suffix
func (a FollowageTable) WithSuffix(suffix string) *FollowageTable {
	return newFollowageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFollowageTable(schemaName, tableName, alias string) *FollowageTable {
	return &FollowageTable{
		followageTable: newFollowageTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newFollowageTableImpl("", "excluded", ""),
	}
}

func newFollowageTableImpl(schemaName, tableName, alias string) followageTable {
	var (
		FollowerHandleColumn = postgres.StringColumn("follower_handle")
		FollowedHandleColumn = postgres.StringColumn("followed_handle")
		FollowedSinceColumn  = postgres.TimestampColumn("followed_since")
		allColumns           = postgres.ColumnList{FollowerHandleColumn, FollowedHandleColumn, FollowedSinceColumn}
		mutableColumns       = postgres.ColumnList{FollowedSinceColumn}
	)

	return followageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		FollowerHandle: FollowerHandleColumn,
		FollowedHandle: FollowedHandleColumn,
		FollowedSince:  FollowedSinceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
